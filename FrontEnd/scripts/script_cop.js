// D√©finition des variables contenant le texte du titre et du paragraphe
let contenuTitre = "Azertype"
let contenuParagraphe = "L'application pour apprendre √† taper plus vite !"

// Cr√©ation d'un div avec createElement. Dans cette div, on va cr√©er un titre h1 et un paragraphe p
let nouvelleDiv = document.createElement("div")
let nouveauTitre = document.createElement("h1")
let nouveauParagraphe = document.createElement("p")

// On ajoute du texte dans le titre et le paragraphe
nouveauTitre.textContent = contenuTitre
nouveauParagraphe.textContent = contenuParagraphe

// On ajoute le titre et le paragraphe dans la div
nouvelleDiv.appendChild(nouveauTitre)
nouvelleDiv.appendChild(nouveauParagraphe)

// On ajoute la div dans le body
let body = document.querySelector("body")
body.appendChild(nouvelleDiv)

const sectionFiches = document.querySelector(".fiches");
sectionFiches.appendChild(imageElement);
sectionFiches.appendChild(nomElement);
sectionFiches.appendChild(prixElement);
sectionFiches.appendChild(categorieElement);

// autre m√©thode:
let div = `
    <div>
        <h1>${contenuTitre}</h1>
        <p>${contenuParagraphe}</p>
    </div>
    `;
body.innerHTML = div

/*<button id="monBouton">Cliquez-moi !</button>*/
let monBouton = document.getElementById("monBouton");
    monBouton.addEventListener("click", function () {
        console.log("Vous avez cliqu√© sur le bouton")
    });

    /* avec une fonction fl√©ch√©e*/
    monBouton.addEventListener("click", () => {
    console.log("Vous avez cliqu√© sur le bouton")
});
monBouton.addEventListener("click", () => {
    console.log("Vous avez cliqu√© sur le bouton")
});
document.addEventListener('keydown', (event) => {
    console.log(event.key);
});
// R√©cup√©ration des pi√®ces depuis le fichier JSON
const reponse = await fetch("pieces-autos.json");
const pieces = await reponse.json();

article.prix < 35 ? "‚Ç¨" : "‚Ç¨‚Ç¨‚Ç¨"

// ‚Ä¶
const prixElement = document.createElement("p");
prixElement.innerText = `Prix: ${article.prix} ‚Ç¨ (${article.prix < 35 ? "‚Ç¨" : "‚Ç¨‚Ç¨‚Ç¨"})`;
// ...
document.body.appendChild(prixElement);

/* Fournir une valeur par d√©faut gr√¢ce √† l‚Äôop√©rateur nullish
L‚Äôop√©rateur nullish s‚Äôutilise lorsque vous pensez avoir une information dans une variable mais que finalement, il n‚Äôy en a pas.

√áa peut arriver quand, concr√®tement ? ü§®

Eh bien, quand une valeur est null, et donc qu‚Äôelle n‚Äôa pas de valeur, ou bien lorsqu‚Äôelle est undefined, et donc qu‚Äôelle n‚Äôest pas d√©finie. Dans notre cas, la pi√®ce automobile ‚ÄúBalai d‚Äôessuie-glace‚Äù n‚Äôappartient √† aucune cat√©gorie. On aimerait le pr√©ciser entre parenth√®ses lorsque c‚Äôest le cas.

L‚Äôop√©rateur s‚Äô√©crit avec deux ?? sous la forme suivante :

expression √† tester ?? valeur de substitution

On √©crira donc :*/
categorieElement.innerText = article.categorie ?? "(aucune cat√©gorie)";

for (let i = 0; i < pieces.length; i++) {

// R√©cup√©ration de l'√©l√©ment du DOM qui accueillera les fiches
const sectionFiches = document.querySelector(".fiches");
// Cr√©ation d‚Äôune balise d√©di√©e √† une pi√®ce automobile
const pieceElement = document.createElement("article");
// On cr√©e l‚Äô√©l√©ment img.
const imageElement = document.createElement("img");
// On acc√®de √† l‚Äôindice i de la liste pieces pour configurer la source de l‚Äôimage.
imageElement.src = pieces[i].image;
// Idem pour le nom, le prix et la cat√©gorie...

// On rattache la balise article √† la section Fiches
sectionFiches.appendChild(pieceElement);
// On rattache l‚Äôimage √† pieceElement (la balise article)
pieceElement.appendChild(imageElement);
// Idem pour le nom, le prix et la cat√©gorie...
}

const boutonTrier = document.querySelector(".btn-trier");
boutonTrier.addEventListener("click", function () {
    // ...
});

boutonTrier.addEventListener("click", function () {
    pieces.sort(function (a, b) {
        return a.prix - b.prix;
    });
    console.log(pieces);
});

/* 
Quand j‚Äô√©cris ton code, les fiches produits restent dans le m√™me ordre. 
Pourquoi l‚Äô√©cran ne change pas ?
La fonction sort modifie la liste qu‚Äôelle r√©ordonne ‚Äúen place‚Äù (in-place, en anglais). 
Cela veut dire que les √©l√©ments de la liste changent de place. 
Cela pose un probl√®me car la liste d‚Äôorigine avec l‚Äôordre d‚Äôorigine est aussi modifi√©e. Pour r√©soudre ce probl√®me, nous pouvons cr√©er une copie de la liste avec la fonction Array.from. Nous √©crirons donc :
*/
// Gestion des boutons

boutonTrier.addEventListener("click", function () {
  const piecesOrdonnees = Array.from(pieces);

  piecesOrdonnees.sort(function (a, b) {
    return a.prix - b.prix;
  });

  console.log(piecesOrdonnees);
});

/*Filtrez les √©l√©ments d‚Äôune liste gr√¢ce √† la fonction filter
Maintenant que nous avons g√©r√© le tri des pi√®ces, ajoutons un listener sur le bouton ‚ÄúFiltrer les pi√®ces non abordables‚Äù pour n‚Äôafficher que les pi√®ces dont le prix est inf√©rieur ou √©gal √† 35 ‚Ç¨.

On √©crira donc :*/
const boutonFiltrer = document.querySelector(".btn-filtrer");
boutonFiltrer.addEventListener("click", function () {
    // ...
});
/*
Pour filtrer les √©l√©ments d‚Äôune liste, nous allons utiliser la fonction filter. 
Elle prend en argument une fonction anonyme qui sera appel√©e une fois par √©l√©ment de la liste. 
La fonction anonyme prend un param√®tre : l‚Äô√©l√©ment √† tester, qui se trouvera ou non dans la liste filtr√©e.
La fonction anonyme doit retourner une valeur bool√©enne :
true si l‚Äô√©l√©ment doit se trouver dans la liste filtr√©e ;
false si l‚Äô√©l√©ment ne doit pas se trouver dans la liste filtr√©e.
Dans notre exemple, le fichier JSON contient l‚Äôinformation du prix du produit. 
Le code pour filtrer les pi√®ces indisponibles s‚Äô√©crit donc :*/

boutonFiltrer.addEventListener("click", function () {
   const piecesFiltrees = pieces.filter(function (piece) {
       return piece.prix <= 35;
   });

   
/*
Votre site commence √† prendre forme ! Vous avez r√©ussi √† g√©n√©rer automatiquement les fiches produits sur votre page web. 
Vous l‚Äôavez √©galement rendue interactive en utilisant des filtres pour r√©ordonner les fiches.

Nous souhaitons √† pr√©sent afficher les avis d√©pos√©s sur les produits par les utilisateurs du site. 
Dans la premi√®re partie du cours, nous avions r√©cup√©r√© les produits sous la forme d‚Äôun fichier JSON. √Ä pr√©sent, nous allons r√©cup√©rer les avis √† l‚Äôaide d‚Äôune API en ligne. 
Gr√¢ce √† ce service web, nous serons en mesure d‚Äôafficher en continu des donn√©es actualis√©es.

Dans cette partie du cours, votre page web aura donc besoin de communiquer avec une API en ligne disponible sur l‚Äôadresse http://localhost:8081. 
Vous devrez h√©berger cette API en clonant ce d√©p√¥t GitHub. Avec un terminal, placez-vous  dans le dossier parent du projet de votre page web et lancez les commandes :

git clone https://github.com/OpenClassrooms-Student-Center/7697016-Back-End.git api-http 
cd api-http 
npm install 
npm start

Dans les deux premi√®res parties de ce cours, 
nous r√©cup√©rions les donn√©es depuis le fichier JSON pieces-autos.json :
*/
const reponse = await fetch("pieces-autos.json");
const pieces = await reponse.json();

/*Une requ√™te HTTP concerne toujours une ressource. 
Il s‚Äôagit d‚Äôun type de donn√©e que le service web g√®re, par exemple :
la ressource ‚Äúpi√®ces automobiles‚Äù ;
la ressource ‚Äúavis utilisateur‚Äù.*/

fetch("http://localhost:8081/pieces");
export function ajoutListenersAvis() {
    const piecesElements = document.querySelectorAll(".fiches article button");

    for (let i = 0; i < piecesElements.length; i++) {
      piecesElements[i].addEventListener("click", async function (event) {
           /* ... */
      });
    }
}
function genererPieces(pieces){
¬∑¬∑¬∑for (let i = 0; i < pieces.length; i++) {
¬∑¬∑¬∑//...
¬∑¬∑¬∑¬∑}
¬∑¬∑¬∑¬∑// Ajout de la fonction ajoutListenersAvis
¬∑¬∑¬∑¬∑ajoutListenersAvis();
}
import { ajoutListenersAvis } from "./avis.js";

<script type="module" src="pieces.js"></script>

const id = event.target.dataset.id;
fetch(`http://localhost:8081/pieces/${id}/avis`);
fetch(`http://localhost:5678/api/works`);

fetch("http://monsite.fr/ma-ressource");
console.log("Le script continue sans attendre la r√©ponse");

await fetch("http://monsite.fr/ma-ressource");
console.log("Le script continuera apr√®s avoir re√ßu la r√©ponse");

const id = event.target.dataset.id;
const reponse = await fetch("http://localhost:8081/pieces/" + id + "/avis");

const id = event.target.dataset.id;
const reponse = await fetch("http://localhost:8081/pieces/" + id + "/avis");
const avis = await reponse.json();

